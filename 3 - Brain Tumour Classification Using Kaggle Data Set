# import mne as mne
# import numpy as np
# import tensorflow_estimator as tf
# import datetime as dt
# import Roboflow as roboflow
# import pytorch as py


import os
import keras 
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('dark_background')
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder 
from matplotlib.pyplot import imshow # CONFIDENCE SCORE OF ANTI-TUMOUR  


# USING A BINARY ALGORTIHMIC APPROACH TO CONFIRM TUMOUR

encoder = OneHotEncoder()
encoder.fit([[0], [1]]) 

# 0 - Tumor
# 1 - Normal


# This cell updates result list for images WITH tumor

data = []
paths = []
result = []

for r, d, f in os.walk(r'../input/brain-mri-images-for-brain-tumor-detection/yes'):
    for file in f:
        if '.jpg' in file:
            paths.append(os.path.join(r, file))

for path in paths:
    img = Image.open(path)
    img = img.resize((128,128))
    img = np.array(img)
    if(img.shape == (128,128,3)):
        data.append(np.array(img))
        result.append(encoder.transform([[0]]).toarray())



# This cell updates result list for images WITHOUT tumor

paths = []
for r, d, f in os.walk(r"../input/brain-mri-images-for-brain-tumor-detection/no"):
    for file in f:
        if '.jpg' in file:
            paths.append(os.path.join(r, file))

            # CONNECT LINK TO BRAIN TUMOUR IMAGES DATABASE TO THIS PYTHON FILE VIA OS 
            # APPENDMENT
for path in paths:
    img = Image.open(path)
    img = img.resize((128,128))
    img = np.array(img)
    if(img.shape == (128,128,3)):
        data.append(np.array(img))
        result.append(encoder.transform([[1]]).toarray())


data = np.array(data)
data.shape

result = np.array(result)
result = result.reshape(139, 2)

# data visualization and representation of data

x_train,x_test,y_train,y_test = train_test_split(data, result, test_size=0.2, shuffle=True, random_state=0)

# sizing of test data and splitting pixel values

# BATCH NORMALIZATION USING A CONVOLUTIONAL NEURAL NETWORK - 2 LAYERED KERNALS & Rectified Linear Unit Activation Function

def BatchNormalize():
    model = Sequential() # - iterative cycle - variable

    model.add(Conv2D(32, kernel_size=(2, 2), input_shape=(128, 128, 3), padding = 'Same'))
    model.add(Conv2D(32, kernel_size=(2, 2),  activation ='relu', padding = 'Same')) # RELU function


    model.add(BatchNormalization()) # Library enables Batch Normalization usage
    model.add(MaxPooling2D(pool_size=(2, 2))) # Maximizating data dimensions using pooling laters
    model.add(Dropout(0.25))

    model.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same')) # COnventional 2x2 Kernel Size
    model.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))

    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
    model.add(Dropout(0.25))

    model.add(Flatten())

    model.add(Dense(512, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(2, activation='softmax'))

    model.compile(loss = "categorical_crossentropy", optimizer='Adamax') # Labelling losses & Admax optimizer - segementatio nin Image classificaton scenarios

    print(model.summary())

BatchNormalize()


# Shape Y-Models

y_train.shape

# Program acknowledges Data Evolution

history = BatchNormalize.fit(x_train, y_train, epochs = 30, batch_size = 40, verbose = 1,validation_data = (x_test, y_test))




# PLOTTING CONFIDENCE SCORES & LOSSES - Brief Experimental Analysis

plt.plot(history.history['loss']) # ***** COMMENT AFTER DIAGNOSTIC *******
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Test', 'Validation'], loc='upper right')
plt.show()


# CLASSIFICATION SCORES - BINARY 0/1 Scores

def names(number):
    if number==0:
        return 'This brain scan depicts the status of a tumor!'
    else:
        return 'This brain scan depicts no prescence of an absolute tumour.' # no tumour
    
from matplotlib.pyplot import imshow # CONFIDENCE SCORE OF ANTI-TUMOUR

img = Image.open(r"../input/brain-mri-images-for-brain-tumor-detection/no/N17.jpg")
x = np.array(img.resize((128,128)))
x = x.reshape(1,128,128,3)
res = BatchNormalize.predict_on_batch(x)
classification = np.where(res == np.amax(res))[1][0]
imshow(img)
print(str(res[0][classification]*100) + '% Confidence This Is ' + names(classification))


from matplotlib.pyplot import imshow # COFIDENCE SCORE OF TUMOUR CONFIRMATION!
img = Image.open(r"../input/brain-mri-images-for-brain-tumor-detection/yes/Y3.jpg")
x = np.array(img.resize((128,128)))
x = x.reshape(1,128,128,3)
res = BatchNormalize.predict_on_batch(x)
classification = np.where(res == np.amax(res))[1][0]
imshow(img)
print(str(res[0][classification]*100) + '% Confidence This Is A ' + names(classification))
    
